<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Doria Keung</title>
        <link>https://doriable.github.io/posts/</link>
        <description>Recent content in Posts on Doria Keung</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 08 Mar 2016 00:20:00 -0800</lastBuildDate>
        <atom:link href="https://doriable.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Hackbright Week 9: Projects Week 4</title>
            <link>https://doriable.github.io/posts/2016/03/hackbright-week-9-projects-week-4/</link>
            <pubDate>Tue, 08 Mar 2016 00:20:00 -0800</pubDate>
            
            <guid>https://doriable.github.io/posts/2016/03/hackbright-week-9-projects-week-4/</guid>
            <description>The final full week of projects just flew past us and it&amp;rsquo;s been very stressful and exciting all at once! For those who don&amp;rsquo;t do well with suspense, I have figured out a way to stream music on the client-side (hurrah!). For those who have worked extensively with buffers, byte streams, Web Audio API and Python wave library are probably not all that impressed, but I am quite thrilled. There is now a bit of a wait time as the app processes the stream, but the client-side music playing is definitely worth it.</description>
            <content type="html"><![CDATA[<!--Introduction-->

<p>The final full week of projects just flew past us and it&rsquo;s been very stressful and exciting all at once! For those who don&rsquo;t do well with suspense, I have figured out a way to stream music on the client-side (hurrah!). For those who have worked extensively with buffers, byte streams, Web Audio API and Python wave library are probably not all that impressed, but I am quite thrilled. There is now a bit of a wait time as the app processes the stream, but the client-side music playing is definitely worth it. Before I get into it, here are this week&rsquo;s scrums:</p>

<ul>
<li><strong>Monday</strong>: Over the weekend, I started server-side streaming. Today, I will work on fully implementing server-side streaming for the player. No blockers.</li>
<li><strong>Tuesday</strong>: Yesterday, I managed to get the play button to work and the server now plays music. Today, I will work on implementing the pause and skip buttons. No blockers.</li>
<li><strong>Wednesday</strong>: Yesterday, I have the pause button up and running, and I worked on refactoring some of the code to make further implementation easier. Today, I am working on finishing up the skip button and then continuing onto client-side music streaming. No blockers.</li>
<li><strong>Thursday</strong>: Yesterday, I finished up server-side streaming completely and began experimenting with client-side streaming in my playground. I reviewed sending raw binary data to the front-end. Today, I will continue with working on client-side streaming in my playground, looking into the wave library. No blockers.</li>
<li><strong>Friday</strong>: Yesterday, I explored the wave library and was able to get a wave file to play on the client-side using Web Audio API (yes!). Today, I will continue working on this streaming the data into the front-end. If I am unable to stream while getting the data from Spotify, I will work on loading the buffer then pushing it to the client-side. No blockers.</li>
<li><strong>Saturday</strong>: Felt quite ill, took Saturday off, no news to report.</li>
<li><strong>Sunday</strong>: On Friday, I investigated potential ways of streaming the data directly from libspotify to the client-side, including the Python StringIO library, no leads. Today, I will implement client-side streaming on a branch using a timeout function to load the song before playing. No blockers.</li>
</ul>

<!--Learnings-->

<p>This week, I learned a lot about Python libraries, including the wave library (for reading/writing wave files). I also picked up a lot about the Web Audio API and some of the complexities around music streaming (although I&rsquo;ve only scratched the surface). One of the most valuable ideas I&rsquo;ve learned is working with what I have and accepting my constraints. I had four and a half weeks to build a functioning, demo-able crowdsourced music jukebox. After reviewing my work over the course of the last four weeks, I&rsquo;ve identified several areas I want to continue working on in the upcoming weeks. The first being improving the performance of the client-side streaming. While music is currently playing in the browser, there is a wait time for the song to buffer. Improving this wait time and creating a smoother streaming process is one of my goals for the project in the upcoming week. A second area I want to work on is continuing to refactor my code — moving code blocks into functions and implementing classes for data structures. There are already several areas identified for rework in the upcoming weeks. These are improvements that can be made immediately, whereas the client-side streaming may span more time. Lastly, I want to take the learnings from the last four weeks, especially around architecture, and implement them in my upcoming projects so that I can work more efficiently and improve my skills as a software engineer. I&rsquo;ve learned a lot from building &ldquo;Office Jukebox&rdquo; and I am excited to continue improving it while starting the next step of my Hackbright journey.</p>

<p>On to Week 10 and career day! &#127880;</p>
]]></content>
        </item>
        
        <item>
            <title>Hackbright Week 8: Projects Week 3</title>
            <link>https://doriable.github.io/posts/2016/02/hackbright-week-8-projects-week-3/</link>
            <pubDate>Tue, 23 Feb 2016 23:00:00 -0800</pubDate>
            
            <guid>https://doriable.github.io/posts/2016/02/hackbright-week-8-projects-week-3/</guid>
            <description>This week felt slower and more frustrating than the other two weeks. Mostly because I felt like I invested a lot of time reading and going through documentation as I start hitting more complicated road blocks. Normally I would find this interesting and somewhat relaxing, but trying to go through large portions of complex materials quickly and efficiently in a limited amount of time was a little bit stressful. With that said, here are my stand-ups for Week 8:</description>
            <content type="html"><![CDATA[<!--Introduction-->

<p>This week felt slower and more frustrating than the other two weeks. Mostly because I felt like I invested a lot of time reading and going through documentation as I start hitting more complicated road blocks. Normally I would find this interesting and somewhat relaxing, but trying to go through large portions of complex materials quickly and efficiently in a limited amount of time was a little bit stressful. With that said, here are my stand-ups for Week 8:</p>

<ul>
<li><strong>Monday</strong>: Over the weekend, I did some refactoring and worked out some bugs with voting. The votes are now rendering properly. Today, I am finishing up votes and getting updates to write on both the admin and guest side when a vote goes through. Also, working on a bug around deleting jukeboxes and cleaning up data. No blockers.</li>
<li><strong>Tuesday</strong>: Yesterday, I got the votes to update (the vote count would change when a new vote came in). Today, I am getting the playlist to re-render when a new vote comes in. After that, I will work on setting up testing and also getting ready to work on the next feature – streaming audio. No blockers.</li>
<li><strong>Wednesday</strong>: Yesterday, I got the playlists to re-render when a new vote came in. I also worked out some bugs around the sorting and re-rendering. In addition, I also met with a mentor and looked into ways of streaming the audio. Today, I plan on writing some tests and continue to learn more about streaming audio to the client. No blockers.</li>
<li><strong>Thursday</strong>: Yesterday, I wrote some tests, which took longer than anticipated because of implementing testing for WebSockets. I figured it out by implementing AsyncHTTPTestCase through Tornado. I have some tests up and running, will continue to write them as the project moves along. Today, I will be looking further into the streaming and attempting to find a JavaScript solution in the frontend to play music. I&rsquo;ve split this up into three steps: (1) review what types ways clients can play audio, (2) setting up a buffer on the server side, (3) bridging the two audio formats through sockets. No blockers.</li>
<li><strong>Friday</strong>: Yesterday, I looked up different ways to solve the music streaming issue. It was time-consuming but I feel like I have two or three leads that I want to work on. I also set up a mini Flask app to test these theories. Today, I will work on implementing server-side music playing first so that music playing is working. No blockers.</li>
<li><strong>Saturday</strong>: I took Saturday off, no news to report.</li>
<li><strong>Sunday</strong>: On Friday, I started to work on server-side music playing. Today, I refactored out the playlist as its own class with a queue using deques from the python collections library. This is essential to setting up the music player. No blockers.</li>
</ul>

<!--Learnings-->

<p>This week, I feel that my accomplishments were similar to my struggles. One of the things I am excited about is that I refactored my code (again!) to have a global playlist class. It was an important design decision and it makes everything flow a lot better (still much to be desired around variable naming&hellip;) and the code is now more maintainable, readable, and scalable. However, I really struggled with the implementation. It wasn&rsquo;t the actual process of writing the code that I struggled with but more so overcoming the fact that it needed to be done. When I started working on it today, I was angry with myself and the work because it felt like something I should have identified a couple of weeks back and planned better for. That being said, it was also a key learning point and it makes things much clearer, so ultimately I am happy with it.</p>

<p>This leads to my second learning for the week: testing. I&rsquo;ve finally begun writing tests and not all of that is sorted out yet, but one of my struggles with testing is not really knowing where to begin. It is difficult to design tests that are revealing, comprehensive, and clear on their objectives. Given that we are now entering our last week or so for projects, I wanted to make sure that I&rsquo;ve at least started on the foundations of testing so that I can continue writing tests after our feature freeze on Friday.</p>

<p>Overall it&rsquo;s been a slower week as I dig into the music streaming portion in depth. That was my main struggle this week, learning how to implement the streaming in a time crunch. It&rsquo;s frustrating that I can only go through so much information at a time. However, I think I now have some direction to take this, even though I ended up investing a large chunk of time Thursday and Friday learning by going through books, tutorials, and documentation. It was also uncomfortable not coding much on those days, mostly setting up the testing grounds for streaming, but it paves the way for progress in this upcoming week. I think that I am feeling the pressure as we head into Week 9, but the best way to deal with that is to keep busy and working through what needs to be done.</p>

<p>So, with all of that said, onwards to Week 9! &#128640;</p>
]]></content>
        </item>
        
        <item>
            <title>Hackbright Week 7: Projects Week 2</title>
            <link>https://doriable.github.io/posts/2016/02/hackbright-week-7-projects-week-2/</link>
            <pubDate>Mon, 22 Feb 2016 02:14:00 -0800</pubDate>
            
            <guid>https://doriable.github.io/posts/2016/02/hackbright-week-7-projects-week-2/</guid>
            <description>This is my Week 7 (week 2 of projects) wrap-up, starting with daily scrum stand-ups:
 Monday: Over the weekend I worked on route for searching and rendering results from Spotify Web API. Today, I am working to create a route for adding songs that have been returned from the search. No blockers. Tuesday: Yesterday, I put together the route for searching and adding songs. Today, I am working on rendering the playlist based on the songs I&amp;rsquo;ve added and setting up WebSockets for real-time playlist rendering.</description>
            <content type="html"><![CDATA[<!--Introduction-->

<p>This is my Week 7 (week 2 of projects) wrap-up, starting with daily scrum stand-ups:</p>

<ul>
<li><strong>Monday</strong>: Over the weekend I worked on route for searching and rendering results from Spotify Web API. Today, I am working to create a route for adding songs that have been returned from the search. No blockers.</li>
<li><strong>Tuesday</strong>: Yesterday, I put together the route for searching and adding songs. Today, I am working on rendering the playlist based on the songs I&rsquo;ve added and setting up WebSockets for real-time playlist rendering. No blockers.</li>
<li><strong>Wednesday</strong>: Yesterday, I set up the WebSocket and got new songs to add when the playlist is rendered. Today, I will work on ensuring that the proper playlist is rendered based on the jukebox a user belongs to and also for the current state of the playlist to render when a user connects to the proper jukebox. No blockers.</li>
<li><strong>Thursday</strong>: Yesterday, I figured out how to sort users into groups of connections based on their jukebox, so when new songs are added, the jukebox is updated for only their users. I also ensured that the current version of the jukebox renders when a user joins a jukebox. Today, I&rsquo;m adding the voting function to the jukeboxes. No blockers.</li>
<li><strong>Friday</strong>: Yesterday, I added the voting functions and I had it sync across all connections on the same jukeboxes. So, when a guest votes, it automatically updates the admin view with the new vote total. Today, I am working through some bugs in the voting and then getting ready to set up some tests. This could involve refactoring some of my code as I create unit tests. No blockers.</li>
<li><strong>Saturday</strong>: I was extremely frustrated with some bugs I overcame Friday, so I did not do any major work on my project. I did a small amount of refactoring on my WebSockets.</li>
<li><strong>Sunday</strong>: On Friday, I worked out the bugs in the voting, however I did not get a chance to begin the testing process. Today, I will work on the refactoring and setting up testing. No blockers.</li>
</ul>

<!--Accomplishments-->

<p>For accomplishments this week, I have two to report. The first was getting through all the documentations around WebSockets and implementing them in my project. This was not something we covered in class and as with everything in software, there is more than one way to use WebSockets with Flask. After doing the research and going through the various plugin options out there, I&rsquo;ve chosen to use a Tornado container for my WSGI Flask web app. I felt comfortable with the documentation available for this option and frankly it was the option that I understood the best. We&rsquo;ve been told that software engineers are opinionated and I&rsquo;m starting to see that now. That being said, I&rsquo;m working on keeping an open-mind and getting as much exposure as possible to new technologies. My second accomplishment this week also involves WebSockets. One of the things I was solving for was ensuring that everyone in the same jukebox had the exact same playlist showing at all times. I broke this down into two ideas (1) whenever a user adds a new song to the jukebox, all other participants would receive the same update and (2) when a new participant joined, they would get the most recent playlist loaded for them. So, I went out and did some research on sending messages to all the sockets that were currently open. One of the solutions I encountered involved adding all open connections to a set and then sending out messages to all connections currently in this set. This was very helpful, however, I did not want all users to be in a single gigantic set, since each user should only get updates on the jukebox they belonged to. So, I built on the idea of this solution by creating a dictionary that stored sets of connections based on their jukebox id and updates were only sent to their respective jukeboxes. In retrospect, this is a very simple solution, but I am proud of it because it combined something I found and something I came up with that fit the specifications of my work.</p>

<!--Things I struggled with-->

<p>Some things that I struggled with this week include coping with &ldquo;unveiling my bugs&rdquo; and dealing with the fact that progress on my project is slowing down. One of the things I began this weekend and am continuing today is putting together tests and refactoring some of my code. The problem with testing and refactoring is that the process forces me to face all the bugs that are beneath the surface of each of my features and all the edge cases that trigger these bugs. It&rsquo;s been frustrating overcoming the feeling that I was breaking something that &ldquo;worked&rdquo;, however, I recognize that it didn&rsquo;t work well to begin with, so it was important to iterate. This leads to the second struggle I am having, which is the slowdown in progress. When I am ironing out these wrinkles, it doesn&rsquo;t feel like I am progressing because I am not building new things. That being said, I recognize that this is a very fundamental and important aspect of the work, so I keep this in mind as I work through all of my current features and prepare for adding new features throughout this week.</p>

<p>Thanks for reading and following along with the progress of my project! On to week 8! &#127878;</p>
]]></content>
        </item>
        
        <item>
            <title>Hackbright Week 6: Projects Week 1</title>
            <link>https://doriable.github.io/posts/2016/02/hackbright-week-6-projects-week-1/</link>
            <pubDate>Sun, 14 Feb 2016 14:00:00 -0800</pubDate>
            
            <guid>https://doriable.github.io/posts/2016/02/hackbright-week-6-projects-week-1/</guid>
            <description>My original plan was to blog each day of this week, updating everyone on my project progress. As I started writing posts each day of this week, I found myself writing things like &amp;ldquo;and then I scribbled lines on some graph paper to make wireframes. And then I did it again. And again&amp;hellip;&amp;rdquo;. While each moment was a riveting learning experience in itself and I will look back fondly at my simple self in a few months time, the message really boiled down to &amp;ldquo;I did things that constituted working on my project&amp;rdquo;.</description>
            <content type="html"><![CDATA[<!--Introduction-->

<p>My original plan was to blog each day of this week, updating everyone on my project progress. As I started writing posts each day of this week, I found myself writing things like &ldquo;and then I scribbled lines on some graph paper to make wireframes. And then I did it again. And again&hellip;&rdquo;. While each moment was a riveting learning experience in itself and I will look back fondly at my simple self in a few months time, the message really boiled down to &ldquo;I did things that constituted working on my project&rdquo;. So instead, I decided to pull the scrum stand-ups from each day this week and highlight the main challenges and learning experiences. A wise Hack13right cohort mate said &ldquo;it&rsquo;s important for a developer&rsquo;s blog to have a message for your readers, it&rsquo;s not just a glorified Github&rdquo;, and she&rsquo;s right. Here are my scrum stand-ups from week 1:</p>

<ul>
<li><strong>Monday</strong>: Over the weekend, I finalized my data model and put together some rough wireframes. Today, I am working on the first iteration of model.py. No blockers.</li>
<li><strong>Tuesday</strong>: Yesterday, I put together my first iteration of model.py and wireframes. I also met with a mentor to talk about my model.py, sockets and streaming for audio, and review my wireframes. Today, I will be hooking up my database to model.py today, testing it, then starting to plan out my routes. I will also be meeting with a mentor today to look over model.py. No blockers.</li>
<li><strong>Wednesday</strong>: Yesterday, I got model.py and my database to talk to each other and work. I also set up some Flask routes that I will need to populate. I met up with a mentor and we worked through creating and logging a jukebox into my database (yay!). Today, I need to work on building out my templates and Flask routes. Also, Twilio field trip with the cohort, yay! No blockers.</li>
<li><strong>Thursday</strong>: Yesterday, I built out the skeleton of my templates and hooked a route for creating guest users when they open up the public link for a jukebox. Today, I need to continue on this trajectory and set up a route for deleting jukeboxes, admins, and guests. No blockers.</li>
<li><strong>Friday</strong>: Yesterday, I ran into some issues testing AJAX requests on deleting jukeboxes, admins, and guests. I resolved that issue by remembering a mentor told me to always test Javascript incognito to ensure my browser cache is always clear. The route now works. Today, I will be going off-site to a mentor office for lunch along with three other cohort mates and I will start work on search and adding songs to playlists. No blockers.</li>
<li><strong>Saturday</strong>: Yesterday, I was a bit crunched for time between the off-site and study hall for class, so I just set up the route and had it submit properly. Today, I plan on continuing search and song add, then move onto votes if there is time. No blockers.</li>
<li><strong>Sunday</strong>: Yesterday, right after I said &ldquo;no blockers&rdquo;, I ran into a blocker. The Metadata API is discontinued for libspotify, so some test code I ran a couple of weeks or so back no longer do what they used to. I fixed the blocker by migrating the search portion of my project to the Spotify Web API. Today, I intend to complete song adding and also set up voting on the playlist. No blockers.</li>
</ul>

<p>To clarify, I don&rsquo;t actually have a scrum stand-up with myself out loud on the weekends, but I find myself making a little stand-up statement before I start working (once again, in my head, not out loud).</p>

<!--Accomplishments-->

<p>In terms of accomplishments this week, I&rsquo;d say &ldquo;getting started&rdquo;. None of the code I&rsquo;ve written this week is particularly challenging or far beyond the scope of our classroom (the Hackbright instructors do a great job of going over everything with us weeks 1-5), however, one of the biggest learning points has been &ldquo;getting my shit together&rdquo;. There are a lot of things that go into the planning stage but at the same time, it&rsquo;s hard not to get sucked up with project management and not start coding. Some ways that I&rsquo;ve stayed on top of this:</p>

<ul>
<li>I write code everyday. This is a software project so something needs to be built each day. While there is a lot of research to be done and things to be planned, there is always the potential to code something at every stage.</li>
<li>I keep a &ldquo;to-do 2x2&rdquo; instead of a &ldquo;to-do list&rdquo;. There is the unfortunate truth that life is constrained by time, so I plot all my to-do&rsquo;s on &ldquo;time needed to complete something&rdquo; vs. &ldquo;urgency&rdquo;. This helps optimize my time on things I need to finish each day, instead of finding myself trying to finish multiple unimportant (or even somewhat important) yet extremely time-consuming things. It also helps me make tough decisions when it comes to balancing what the right things are for me to complete in one day.</li>
<li>When I find myself asking the question &ldquo;what&rsquo;s happening right now?&rdquo; in the middle of doing something, I stop immediately. I don&rsquo;t have time to confuse myself. I usually consult either my to-do matrix or a relevant document to bring myself back on track (e.g. I&rsquo;m working on hooking up some routes this week, I&rsquo;ll check my wireframes or this chart of API endpoints I put together for reference).</li>
</ul>

<!--Things I struggled with-->

<p>As for things I&rsquo;ve struggled with this week, it&rsquo;s the idea of dealing with &ldquo;unknowns&rdquo;. There is no absolute, or rather, as logical thinkers, we &ldquo;know&rdquo; that there &ldquo;should&rdquo; be an optimal solution and we &ldquo;think&rdquo; we hold that solution. Going into this project, I tested the API&rsquo;s I wanted to use early and thought I &ldquo;knew roughly what was going to happen&rdquo;. Of course, I was very much incorrect, there is still a lot to learn and new and mysterious problems were constantly popping up (I&rsquo;m looking at you browser cache). When I found out that the Spotify Metadata API had been completely discontinued, I had to quickly learn how to migrate my previous work to the Spotify Web API. I am lucky that the team at Spotify had written a useful post on how the previous endpoints mapped to the Web API. However, I still had to take some time to figure everything out and read through the docs thoroughly, especially since this was a new experience for me. Coming out of week 1, this was a rewarding experiences for me and while I am frustrated it happened, I am also glad, because I had the opportunity to dig deeper into the technologies I am using for this project.</p>

<!--Closing remarks-->

<p>Lastly, some quick notes on the blog: if you are reading this from an iPhone 6 plus, no I have not fixed the footer issue. I will be looking into changing the layout soon, so these issues will hopefully be addressed with the full layout change.</p>

<p>As usual, thanks for reading and yay, projects! &#10024;</p>
]]></content>
        </item>
        
        <item>
            <title>Hackbright Week 5</title>
            <link>https://doriable.github.io/posts/2016/02/hackbright-week-5/</link>
            <pubDate>Sun, 07 Feb 2016 23:21:00 -0800</pubDate>
            
            <guid>https://doriable.github.io/posts/2016/02/hackbright-week-5/</guid>
            <description>Happy Lunar New Year! &amp;#128053; Even though I was unable to celebrate it with my family in-person, I had the chance to Skype with them and wish them a happy new year.
It&amp;rsquo;s the end of week 5! Apologies on the late post this week, it&amp;rsquo;s been extremely hectic. We are about to start the second half of Hackbright: computer science topics and our personal projects, and I am both excited and anxious.</description>
            <content type="html"><![CDATA[<p>Happy Lunar New Year! &#128053; Even though I was unable to celebrate it with my family in-person, I had the chance to Skype with them and wish them a happy new year.</p>

<p>It&rsquo;s the <strong>end of week 5</strong>! Apologies on the late post this week, it&rsquo;s been extremely hectic. We are about to start the second half of Hackbright: computer science topics and our personal projects, and I am both excited and anxious.</p>

<p>This week for lab we worked on a 4-day long movie rating Flask app that was great simulation for working on our projects. It was awesome finally being able to see everything we&rsquo;ve been working on come together and also incorporate a shiny new machine-learning piece (whoot, Pearson correlations!). I really enjoyed working through the entire process with my pair, including working through the data model, setting up the routes, and putting in the features outlined in our lab assignment (also really acknowledging how long each step takes!).</p>

<p>During the lectures, we covered the following topics:</p>

<ul>
<li>SQLAlchemy — SQL + Python = gold!</li>
<li>Python Datetime library — sometimes time  zones and Daylight Savings can be confusing, but it&rsquo;s almost always after 5pm somewhere, potentially twice in one day! &#x1F37B;</li>
<li>Web patterns — how to think about and structure routes&hellip; remember, everything on the internet is a form!</li>
<li>Ratings algorithm — predicting movie ratings by finding movie buddies for each user</li>
<li>Data modeling</li>
</ul>

<p>For my project, I&rsquo;ve nitpicked my data model several times now, as well as gone over it with my advisor, mentors, peers, family members and non-tech friends, and I think I&rsquo;ve finally landed on something that fulfills the needs of my project. In <a href="http://doriable.github.io/life-update/work/hackbright/tech/learning-code/2016/01/30/week-4.html" target="blank">my last post</a> I discussed how I found the data modeling process interesting, especially going back and asking myself if it &ldquo;accurately represents the universe of my app&rdquo;. I definitely found myself in full Gollum-mode, debating every minutia of the model to myself.</p>

<p><iframe src="//giphy.com/embed/V4uGHRgz0zi6Y?html5=true" width="480" height="292" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="http://giphy.com/gifs/V4uGHRgz0zi6Y">via GIPHY</a></p></p>

<p>While I am skeptical that I&rsquo;ve found the final-final version of things, I am comfortable enough with it that I can start working on coding the models on Monday. Talking it through with all the different people around me, including those who are not familiar with software development has been incredibly helpful. It was a great way for me to work on communicating my logic in a clear, thoughtful manner and it was rewarding when my friends and family back in Canada didn&rsquo;t think of me as a complete lunatic (although a few of them needed a lot of persuasion). It was also nice sharing these ideas with them because sometimes it&rsquo;s not always clear what software development actually entails for those outside of the industry. This weekend, some wonderful fellow cohort mates and I also met up to talk through our data models in preparation for Monday. It was a great way to get peer feedback on each of our thought processes and helped ensure that we weren&rsquo;t going into Week 6 empty-handed and confused. Also, since we&rsquo;ll be working individually on our projects from now until Week 10, it&rsquo;s good to show that even though we won&rsquo;t be pair programming, we&rsquo;re still there each other through this endeavour. To my hard-working, brilliant, tenacious cohort: let&rsquo;s lean on each other to get through our bad days and celebrate each of our victories together. We&rsquo;re all going to experience both over the course of the next few weeks, so let&rsquo;s support each other through this &#9786;</p>

<p>Throughout this week, I have also planned out the wireframes and routes for my app. In the upcoming week, I can begin working through different pieces of my project as I figure out sockets and streaming. I will also be revamping my blog this week and using it to keep track of daily progress on my project. The new blog post format will be as follows:</p>

<ul>
<li>Daily scrum meeting: what I did yesterday, what I&rsquo;m doing today, what am I stuck on — a quick tagline to start out the post</li>
<li>Things I accomplished today</li>
<li>Things I struggled with today</li>
<li>Things I am still figuring out (read: sockets and streaming)</li>
<li>What I plan to do tomorrow (and did I stick with what I planned yesterday)</li>
</ul>

<p>Onwards and upwards to week 6! &#127880;</p>
]]></content>
        </item>
        
        <item>
            <title>Hackbright Week 4</title>
            <link>https://doriable.github.io/posts/2016/01/hackbright-week-4/</link>
            <pubDate>Sat, 30 Jan 2016 01:21:00 -0800</pubDate>
            
            <guid>https://doriable.github.io/posts/2016/01/hackbright-week-4/</guid>
            <description>As we cross the Week 4 finish line at Hackbright, we are also nearing the end of our metaphorical &amp;ldquo;80 days around the world of web development&amp;rdquo; (if only we actually got 80 days before we started our projects!).
This week was super exciting, although the contrast of SQL (which is awesome!) versus Javascript is a little bit of an emotional roller coaster for me. I have a working theory that Javascript is so widely-used because it popularized the mystique of programming and developers are trolls, thus wanting the general public to continue thinking that coding is &amp;ldquo;some magical shit that happens in a computer&amp;rdquo; without rhyme or reason.</description>
            <content type="html"><![CDATA[<p>As we cross the Week 4 finish line at Hackbright, we are also nearing the end of our metaphorical &ldquo;80 days around the world of web development&rdquo; (if only we actually got 80 days before we started our projects!).</p>

<p>This week was super exciting, although the contrast of SQL (which is awesome!) versus Javascript is a little bit of an emotional roller coaster for me. I have a working theory that Javascript is so widely-used because it popularized the mystique of programming and developers are trolls, thus wanting the general public to continue thinking that coding is &ldquo;some magical shit that happens in a computer&rdquo; without rhyme or reason. It is a wolf in sheep&rsquo;s clothing — &ldquo;I borrowed the appearance of other lower-level languages then decided to make up my own rules&rdquo;. However, I will give Javascript credit on one thing: it gives the programmer that little tremor of thrill when the semicolons are put in, very much like pulling the penny slots at Niagara falls (<em>&ldquo;cherry&hellip; cherry&hellip; aw shucks, so close&hellip; again!&rdquo;</em>). Also, Javascript provides a tiny creative space for programmers to be clever, &ldquo;to express and distinguish themselves&rdquo;, which I find really interesting (but mostly frustrating). And I admit I really enjoy the little quirks Javascript programmers write to make things work a certain way (e.g. the &ldquo;+function() {}();&rdquo; expression we talked about to avoid polluting the global namespace, which I found super fun). They are like little mind games the programmers are playing against Javascript. Clearly, my relationship status with Javascript is currently &ldquo;it&rsquo;s complicated&rdquo;.</p>

<p>On the flip side, SQL and databases are fantastic. While we are making short, simple queries in lab, it may not seem immediately obvious, but SQL is very powerful in helping us provide key insights to a user. Without it, the data would be a giant cloud out in the ether of our databases but through SQL, we can tease out information that is valuable to the user and elevate it through the rest of our app. In fact, when users interact with it, it doesn&rsquo;t even feel like &ldquo;data&rdquo;. When we find a recipe in a cooking app or <em>play a song from a playlist</em>, data about a recipe or a song is being processed then packaged and pushed forward for us to use. Keeping all of that data organized in databases and formulating ways to draw it out is very interesting. Also, as we are settle down on our project topics, designing how the data will be stored in our databases is super fun. I love the process of backtracking, asking myself:</p>

<ul>
<li>&ldquo;What are the features the user of this data (in this case, me, since we are working on our projects individually) trying to build?&rdquo;</li>
<li>&ldquo;What types of information help support these features (e.g. are they recipes? global food waste statistics? songs?) and how do these pieces of data relate to each other?&rdquo;</li>
<li>&ldquo;What is unique about these pieces of data versus what intersects? How should I put them in the database in a way where I can get what I want without being verbose or repeating myself?&rdquo;</li>
<li>&ldquo;Given a chosen data layout, is it clear what I should be saying to my database through SQL to get the information that will help support the features of the application?&rdquo;</li>
</ul>

<p>As I worked through the first iteration of the data model for my project, I used the last question as a way of checking whether I was going down the right path with my work. If it wasn&rsquo;t intuitive how I would extract the information I needed, then likely I needed to think differently about my tables.</p>

<p>Finally, I wanted to quickly talk about some changes that I will be making to the structure of my blog posts over the course of the next few weeks. As we start projects, the posts will shift focus to tracking my project and I will likely use it in conjunction with our daily scrum meetings. For readers not fully familiar with Hackbright, our projects will be individual and span weeks 6 through 10 of the program, so these upcoming weeks are very exciting! Expect the changes to take affect soon, probably over the course of Week 5 as I start to experiment with stuff for my project.</p>

<p>As usual, thanks for reading and supporting me through my journey at Hackbright! &#129412;</p>
]]></content>
        </item>
        
        <item>
            <title>Hackbright Week 3</title>
            <link>https://doriable.github.io/posts/2016/01/hackbright-week-3/</link>
            <pubDate>Sat, 23 Jan 2016 02:21:00 -0800</pubDate>
            
            <guid>https://doriable.github.io/posts/2016/01/hackbright-week-3/</guid>
            <description>Week 3 down and wow it was a crazy week! I&amp;rsquo;m fairly certain my brain is just liquid sloshing around in my skull right now and I&amp;rsquo;m afraid to go to sleep in case it starts pouring out of my ears. This week, we covered an incredibly broad range of topics:
 HTML and CSS (Geocities and Angelfire flashbacks — Hamster Dance, this is all that&amp;rsquo;s left of you&amp;hellip;) How the web works (still tubes, wires, and magic — but also requests and responses!</description>
            <content type="html"><![CDATA[<p>Week 3 down and <a href="https://en.wiktionary.org/wiki/Wikisaurus:wow" target="blank">wow</a> it was a crazy week! I&rsquo;m fairly certain my brain is just liquid sloshing around in my skull right now and I&rsquo;m afraid to go to sleep in case it starts pouring out of my ears. This week, we covered an incredibly broad range of topics:</p>

<ul>
<li>HTML and CSS (Geocities and Angelfire flashbacks — Hamster Dance, <a href="http://www.hamsterdance.org/hamsterdance/" target="blank">this</a> is all that&rsquo;s left of you&hellip;)</li>
<li>How the web works (still tubes, wires, and magic — but also requests and responses!)</li>
<li>Flask (aka &ldquo;oh, so that&rsquo;s how these things can work together&rdquo;)</li>
<li>Boostrap (brought to you by designers who understood prime factorization)</li>
<li>Testing software</li>
</ul>

<p>Yeah, that&rsquo;s a lot. Also, we met our mentors this week and now I have three wonderful individuals I&rsquo;m super excited to work with! We had Chinese food on the night of the Mentor Mixer and they left me with some excellent fortune cookie messages:</p>

<p><img src="/images/fortune_cookie.jpg" style="max-width:65%;"></p>

<p>Now that I&rsquo;ve gone through three weeks of Hackbright, I&rsquo;ve settled into a pretty comfortable routine for myself. This includes some time each day either working on some basic coding challenges online (e.g. <a href="http://adventofcode.com/" target="_blank">Advent of Code</a>, <a href="https://github.com/karan/Projects" target="_blank">some puzzles I found on Github</a>, etc.) or learning something new about coding. So, this week I decided to try an experiment. I wanted to see how quickly it would take for me to adopt the basics of a new programming language. I mistakenly chose Go for this experiment. As a benchmark/metric, I decided to use the length of time it would take for me to learn enough to translate my Python solution to Go for the <a href="http://adventofcode.com/day/1" target="_blank">first Advent of Code challenge</a>. The answer is: too long, especially when the documentation is a bit difficult to navigate.</p>

<p>I understand that what you are about to see is the programming equivalent of me going to Montreal and saying &ldquo;poutine s&rsquo;il vous plaît&rdquo;, but I was unreasonably ecstatic when the following Go code printed the same answer as my Python code:</p>

<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
    <span style="color:#e6db74">&#34;fmt&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
    <span style="color:#75715e">//I know, it should iterate through an input file
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//and not just some huge string I copied in...
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//like I said, poutine please.
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">input</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;((((()...&#34;</span>
    <span style="color:#a6e22e">floor</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">char</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">input</span> {
        <span style="color:#66d9ef">if</span> string(<span style="color:#a6e22e">char</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;(&#34;</span> {
            <span style="color:#a6e22e">floor</span><span style="color:#f92672">++</span>
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> string(<span style="color:#a6e22e">char</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;)&#34;</span> {
            <span style="color:#a6e22e">floor</span><span style="color:#f92672">--</span>
        }
    }
    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Santa is on %d floor\n&#34;</span>, <span style="color:#a6e22e">floor</span>)
}</code></pre></div>

<p>All I have to say is — yes that&rsquo;s an hour I&rsquo;ll never have back, but I learned it all by myself, yeaaaaaah! Plus, Go is a fascinating language, and I would love to return to learning more of it when I am a more experienced software engineer.</p>

<p>Lastly, I just wanted to say that in addition to learning the HTML and CSS at Hackbright, I&rsquo;m also continuously poking and prodding the code for this site. I&rsquo;ve applied a few CSS adjustments over the course of the week, although I have <em>not</em> applied Bootstrap. There are a couple of reasons for this:</p>

<ul>
<li>This site is pretty minimal and applying Bootstrap just feels a little bit like bringing a bazooka to a knife fight</li>
<li><a href="http://www.karenkeung.com" target="_blank">A designer I somewhat admire</a> once told me, when I first started learning to code seriously, that this website should be a learning experience. In order for that to be fully effective, I should code and understand all the moving pieces myself (I feel like learning seems to be a pretty big theme for me lately&hellip;). So even though I&rsquo;ve since come to the conclusion that I am not particularly exuberated by HTML and CSS, and will probably Bootstrap future stuff, working on this has helped solidify a foundation for me, which I really appreciate.</li>
</ul>

<p>That wraps up this whirlwind of a week and as usual, thanks for reading, cheers!</p>
]]></content>
        </item>
        
        <item>
            <title>Hackbright Week 2</title>
            <link>https://doriable.github.io/posts/2016/01/hackbright-week-2/</link>
            <pubDate>Sun, 17 Jan 2016 10:00:00 -0800</pubDate>
            
            <guid>https://doriable.github.io/posts/2016/01/hackbright-week-2/</guid>
            <description>Week 1 of Hackbright just wrapped up! Before digging into week 2 of Hackbright, I want to first observe a short moment of silence to honor the greatest head of house Slytherin has ever seen.
We covered a lot of ground this week at Hackbright, including the following:
 Collections: lists, tuples, sets, dictionaries Markov chains Twitter API Object-oriented programming More command line tools, including working with virtualenv  For me, week 2 had a real focus on expanding our understanding of developing software by bringing together all of these data structures and logical tools and getting our brains ticking on good &amp;ldquo;design&amp;rdquo;.</description>
            <content type="html"><![CDATA[<p>Week 1 of Hackbright just wrapped up!
Before digging into week 2 of Hackbright, I want to first observe a short moment of silence to honor the <a href="http://www.cnn.com/2016/01/14/entertainment/obit-alan-rickman/" target="_blank">greatest head of house Slytherin has ever seen</a>.</p>

<p>We covered a lot of ground this week at Hackbright, including the following:</p>

<ul>
<li>Collections: lists, tuples, sets, dictionaries</li>
<li>Markov chains</li>
<li>Twitter API</li>
<li>Object-oriented programming</li>
<li>More command line tools, including working with virtualenv</li>
</ul>

<p>For me, week 2 had a real focus on expanding our understanding of developing software by bringing together all of these data structures and logical tools and getting our brains ticking on good &ldquo;design&rdquo;. Design is not visual in this case — it refers to being cognisant of how we stitch together all the moving parts of our program. The lab exercises are longer this week and allude to this by bringing together different learning points and showing us how all the teeth on the gears fit together.</p>

<p>As an example, this week in lab with our pairs, we built a program, a Twitter bot, that tweeted messages generated based on a body of text (corpus) provided by the user through a Markov chain. This combined two separate tools, a mathematical model and a social media API, demonstrating how they work together to form a simple program with specific features. Also, it was just fun playing with various iterations of &ldquo;Green Eggs and Ham&rdquo; and other corpora (would you, could you, Sam I am?) &#127859;</p>

<p>And of course, the star of this week is working with classes, the final frontier of object-oriented programming in Python (for now). The way we interact with them reveals a lot about the way the creators of Python intended for developers to think about object-orientation. Python classes are very fluid and I find them intuitive to set-up because they have a flexible set of rules. A valuable way of embedding these concepts for my pair and I this week was to constantly say out loud, using the proper vocabulary, each time we &ldquo;instantiated a new object with the class (blank)&rdquo; and set &ldquo;instance/attribute variables&rdquo;, etc. The verbal repetition helped solidify the material.</p>

<!--The engineer I aspire to be-->

<p>During Career Coffee this week, we talked about telling our stories. We are encouraged to reflect on our past experiences and extract our personal narratives. Combined with the design-centric class materials this week, it really got me thinking about what my personal mantra/philosophies on software engineering. I began to put together a profile of &ldquo;what type of software engineer I want to be (when I grow up)&rdquo;. I know that sounds like a Buzzfeed quiz, but since I don&rsquo;t feel I have the authority to speak definitively about what makes a good software engineer, I can only share the qualities I currently aspire to embody in my upcoming career. They are fairly general and are still budding, hopefully they are still interesting.</p>

<p>So far I&rsquo;ve chosen the following three qualities to work on:
- Empathy for everyone and everything — the engineering team, the maintainer(s) of the code, the product team, the end-user, and the technology
- Never let the technology outgrow me — or at least my passion for it
- Grit and perseverance — no problem is above me but I am not above the problems</p>

<p><h3>Empathy</h3>
This is something all humans should generally strive for, but in the context of our lectures this week, it is important to extend empathy to those around us when writing code. Coding is not a private, personal thing — when we write a line of code, people are going to be affected by it. Someone, someday, will read, use, and/or maintain the code we write, we don&rsquo;t just get to keep that in a locket around our necks. So, it is important in the design phase to be empathetic towards other software engineers — focussing on clarity in the code and always looking for ways to improve accessibility. I also want to take into account the rest of my product team and the end-user. A good piece of software (that sells) has features a user wants and a great execution to go with it. This cannot be achieved if any part of the product team is missing. Thus it is important to pay attention to what non-programmers are saying about the program and through the lens of a software engineer, improving the final user experience, starting from a solid, thoughtful software structural design.</p>

<p><h3>Passion for Technology</h3>
Part of being good at something is enjoying working with it. I always want to stay updated on the technology world as a whole and hopefully never let it outgrow me. Unfortunately, as with most things I will likely at some point fall behind (probably in a far, far future), but even then, I would never want it to be beyond my comprehension or to become so out of touch that it is no longer something I enjoy.</p>

<p><h3>Grit and Perseverance</h3>
I think this last piece is straightforward and very much conventional wisdom, but it goes a long way here at Hackbright. In a bootcamp setting, everything is quicker and we are all sacrificing a lot to be in the classroom together. The exercises we are facing are designed to push our limits in the compressed timelines. Issues will arise when pairing and sometimes heads will butt. That being said, these things are surmountable — they are not outside of our abilities to solve them. Grit is what keeps us pushing back on exercises that challenge us and puts our ego aside so we can have the conversations we need to have with our pairs. It also shows us that we are not above solving these issues. We should not have the expectation that others will pick up after us — we have a responsibility to work through the things we encounter. Grit gives us the energy to face all the things that are flying in at once. This is something that I would want to carry throughout my software engineering career.</p>

<p>As mentioned earlier, the picture I&rsquo;ve painted is fairly rudimentary, which makes sense since it is only week 2. I just wanted to get some of my thoughts and goals on &ldquo;paper&rdquo; and reflect on them as we continue through our journey at Hackbright!</p>

<p>Lastly, I&rsquo;ve gathered feedback from the first two posts and made some quick updates on the blog itself:</p>

<ul>
<li>I&rsquo;ve put in a return home button after you get to a post — I realized that is very poor planning on my part!</li>
<li>External links now open up to new pages</li>
</ul>

<p>As usual, thank you for reading and cheers! &#129412;</p>
]]></content>
        </item>
        
        <item>
            <title>Hackbright Week 1</title>
            <link>https://doriable.github.io/posts/2016/01/hackbright-week-1/</link>
            <pubDate>Sun, 10 Jan 2016 23:00:00 -0800</pubDate>
            
            <guid>https://doriable.github.io/posts/2016/01/hackbright-week-1/</guid>
            <description>Week 1 of Hackbright just wrapped up!
Given that my first post was dedicated to my wonderful and supportive family and friends, this post is dedicated to the brilliant and fabulous Hack13right ladies I shared my first week with! It&amp;rsquo;s so interesting to see all the different backgrounds and unique personalities and it makes me more excited about the program by the day. We covered a lot of material in our first week, as well as some *house*keeping stuff:</description>
            <content type="html"><![CDATA[<p>Week 1 of Hackbright just wrapped up!</p>

<p>Given that my first post was dedicated to my wonderful and supportive family and friends, this post is dedicated to the brilliant and fabulous Hack13right ladies I shared my first week with! It&rsquo;s so interesting to see all the different backgrounds and unique personalities and it makes me more excited about the program by the day. We covered a lot of material in our first week, as well as some *house*keeping stuff:</p>

<ul>
<li>Sorted, literally, into houses from Harry Potter — I&rsquo;ve been very aptly sorted into Slytherin, which is by default an awesome house for the following reasons: (1) <a href="https://www.youtube.com/watch?v=2p0tZ4Rpoeg" target="_blank">Snape</a>, and (2) Slytherin &gt; Snake &gt; Python&hellip; eh, eh, amirite? &#128013;</li>
<li>Started with the basics of Python, including conditionals and looping, some data structures (lists, tuples, and sets), computer memory, and functions</li>
<li>Got a light lowdown of Git, getting us into the good habit of git status, commits, and pushes (I think I&rsquo;m beginning to get a little trigger happy with git commit&hellip;)</li>
<li>Explored some basic algorithms and logical models/frameworks</li>
<li>Had our first advisor session who will be our guiding spirits as we meander through our Hackbright adventure</li>
</ul>

<!--Pair Programming-->

<p>So overall, a very comfortable, awesome first week of bootcamp! The most important thing we learned this week however, (in my opinion) isn&rsquo;t any one &ldquo;thing&rdquo; we covered but starting pair programming. This is a totally new experience for me and it has really changed the way that I think (and talk) about code. A quick overview for those who are not super familiar with pair programming, it&rsquo;s a single workstation with two screens (although sometimes one, but we have two at Hackbright), two keyboards, two mice, and two programmers working on the same piece of code. Typically, to keep organized, one programmer will take on the role of &ldquo;driving&rdquo; (typing out the code) and the other will take on the role of &ldquo;navigating&rdquo; (providing guidance), with the two programmers switching often.</p>

<p>I find that actually, in many ways, I enjoy &ldquo;navigating&rdquo; in pair programming more than I do &ldquo;driving&rdquo;. Coming into Hackbright, and I&rsquo;m sure many others likely shared this opinion at some point or other, I thought that if I didn&rsquo;t physically type out lines of code constantly, I wasn&rsquo;t &ldquo;earning my share&rdquo; of the pair programming partnership (don&rsquo;t lie Hackbright readers, I know you thought these things as some point too!). Now that we&rsquo;ve sat down in the lab and actually began the pair programming exercises, I found the part that brought me most enjoyment was discussing the instructions with my partners and solving each problem together — the more complicated it was the better! Coding was just a way to get the computer to understand the super smart solutions we came up with. The &ldquo;driving&rdquo; experience was more about &ldquo;translating my partner&rsquo;s and my cool thoughts for the machine&rdquo; rather than just the &ldquo;act of writing code&rdquo;.</p>

<p>That being said, I think that I have been falling into the trap of &ldquo;drive-igating&rdquo; (driving and navigating). It&rsquo;s hard not to get super excited about an idea, get carried away with it, and want to get it out on the screen instantly. For this coming week of Hackbright, I&rsquo;ll be practicing more &ldquo;pair programming mindfulness&rdquo; and my goal is to set each pair programming session up with conversations about pairing style and also as the exercises we are working on become more advanced, conversing more with my partner and setting up a gameplan/pseudocoding in advance more often.</p>

<p>It&rsquo;s a strange thought to articulate, but I feel like pair programming makes the exercises and the work we do more &ldquo;language agnostic&rdquo; and we&rsquo;re really learning to solve problems with others beyond Python. Pair programming also forces us to discuss our logic and ideas with our partners constantly and keeping those lines of communication open, so it forces us to understand the code on a higher level than just the syntax. <a href="https://en.wikipedia.org/wiki/Lagrange_multiplier#Economics" target="_blank">It&rsquo;s like maximizing utility of consumers given a budget constraint in an economic model</a>. We use the Lagrangian. In order to reach that calculation, we need to first understand what &ldquo;utility&rdquo; and &ldquo;budget&rdquo; mean on a logical level then we apply the Lagrangian as a mathematical tool for us to get to the solutions we want. If I couldn&rsquo;t explain &ldquo;a budget is a limit on how much a consumer can spend&rdquo; or &ldquo;utility is basically enjoyment/positive gains from &lsquo;stuff&rsquo; consumers buy&rdquo;, then I couldn&rsquo;t say &ldquo;hey, let&rsquo;s use that calculus thingy that maximizes/minimizes consumer happiness given their budget constraints&rdquo; (beyond just &ldquo;my teacher/cat/parent/friend said so&rdquo;). <strong>Talking about code colloquially is an extremely valuable learning point and I don&rsquo;t think it could be achieved in any better way than pair programming and working closely with our peers.</strong></p>

<!--Surviving in a New Environment + Canadiana-->

<p>Switching gears a little bit, I wanted to reflect on adapting to the new environment and lifestyle. I did laundry at an actual coin laundromat for the first time ever! I realize that sounds extremely spoiled of me to say, and to clarify, my family has done coin laundry in the past when we were traveling, but this is a new experience for me as an individual&hellip; <em>anyway</em>, I am now the proud owner of $7.25 in quarters, which I plan on investing in future clean laundry. Beyond the laundry adventure, I found that even though life in San Francisco isn&rsquo;t vastly different from life in Toronto, I still feel that I bring my &ldquo;Canadian-ness&rdquo;/&ldquo;Canadiana&rdquo; around with me. I think it&rsquo;s just little things I say and do that hint at it, like jumping out of a bus seat the second an old person steps on or using the word &ldquo;washroom&rdquo; instead of &ldquo;restroom&rdquo;, but whatever it is, I rarely think about it unless I&rsquo;m outside of Canada. It&rsquo;s hard to describe what being Canadian is when you&rsquo;re in Canada, but when I&rsquo;m elsewhere, I feel like there is a red maple leaf painted on my forehead. I am obviously imagining it and no one can tell just by looking at me, but it&rsquo;s just a peculiar feeling that I carry around with me as I go about my day-to-day life.</p>

<!--Date Night-->

<p>Since a part of our Hackbright education is the concept of &ldquo;self-care&rdquo;, I&rsquo;ve henceforth declared Saturday evening as a time when I explore the city and don&rsquo;t take any work with me (that&rsquo;s right, the laptop is staying home!). So, on my first official &ldquo;Doria date-night&rdquo;, I visited the <a href="http://makerfaire.com/popupSF/" target="_blank">Make Store Pop-Up</a>, purchased a shiny new <a href="http://www.makershed.com/products/make-getting-started-with-raspberry-pi-deluxe-kit" target="_blank">Raspberry Pi</a> starter kit (yay, more coding!) and went for Vietnamese food at <a href="http://www.yelp.com/biz/t%C3%BA-lan-san-francisco-4" target="_blank">Tu Lan</a>. I can&rsquo;t speak to their pho, but their BÚN CH GIÒ THT NNG (Pork Kebab, Imperial Roll &amp; Rice Noodle), especially the Imperial Roll part, is to die for! I mean that somewhat literally, because then I took a walk to my bus stop through the Tenderloin, a word which is now defined in my mind as &ldquo;an area where crack cocaine is smoked and/or sold every square metre&rdquo;. Yes, metric is used here because it is a highly scientific measurement made through the observations of me, a sample size of one. I am, of course, exaggerating for effect, there are many wonderful, charming things about the Tenderloin, but I will still be avoiding walks through the neighborhood at night for the most part.</p>

<!--New Site Features-->

<p>Lastly, I made some quick updates to the site — most notably I&rsquo;ve set up the comments via Disqus and implemented Google Analytics, so I can see where all five of my readers are coming from (kidding, I know it&rsquo;s just you, mom!). I am new to both of these functions — Disqus and I are still working through some of our issues, such as customizing the share function, but if anyone has any advice on these features, I would love to hear from you!</p>

<p>Thanks for reading and I&rsquo;m super excited for week 2! &#127881;</p>
]]></content>
        </item>
        
        <item>
            <title>Starting 2016</title>
            <link>https://doriable.github.io/posts/2016/01/starting-2016/</link>
            <pubDate>Sun, 03 Jan 2016 16:00:00 -0800</pubDate>
            
            <guid>https://doriable.github.io/posts/2016/01/starting-2016/</guid>
            <description>A quick introduction:
I&amp;rsquo;m really excited to start this blog, for a few reasons as you&amp;rsquo;ll see, but I wanted to first preface this with saying: don&amp;rsquo;t worry, this isn&amp;rsquo;t just a &amp;ldquo;New Year&amp;rsquo;s Resolution Blog &amp;trade;&amp;rdquo;.
As some of you may know, I am currently in San Francisco, officially. I flew here on December 31, so I welcomed 2016 in my new, partially set up apartment. I moved out here for the time-being to pursue a Software Engineer Fellowship at Hackbright.</description>
            <content type="html"><![CDATA[<p>A quick introduction:</p>

<p>I&rsquo;m really excited to start this blog, for a few reasons as you&rsquo;ll see, but I wanted to first preface this with saying: <strong>don&rsquo;t worry, this isn&rsquo;t just a &ldquo;New Year&rsquo;s Resolution Blog &trade;&rdquo;</strong>.</p>

<p>As some of you may know, I am currently in San Francisco, officially. I flew here on December 31, so I welcomed 2016 in my new, partially set up apartment. I moved out here for the time-being to pursue a <a href="https://hackbrightacademy.com/" target="_blank">Software Engineer Fellowship at Hackbright</a>. This is a pretty interesting time for me, in the last three days I&hellip;</p>

<ul>
<li>&hellip;got a local cellphone number</li>
<li>&hellip;visited my favorite tea place</li>
<li>&hellip;started spelling &ldquo;favorite&rdquo; without the &ldquo;u&rdquo;, apparently</li>
<li>&hellip;went for a jog in the rain</li>
<li>&hellip;climbed more hills than during the Tough Mudder</li>
<li>&hellip;rediscoved pennies and why we no longer have them in Canada</li>
<li>&hellip;set up this blog on Jekyll (<strong>!!!</strong>)</li>
</ul>

<p>So a pretty archetypal San Francisco/overall American experience. Amidst all of the frenzy of coming out here, I feel like I&rsquo;ve forgotten to thank the people around me who have supported me in this exciting new adventure (and by &ldquo;feel like I&rsquo;ve forgotten&rdquo;, I really mean &ldquo;I totally ignored all my wonderful family and friends&rdquo;). So, this post is, first and foremost, dedicated to them, the world&rsquo;s most fantastic people — I couldn&rsquo;t achieve anything without them.</p>

<p>Secondly, I want to say how excited I am for this fellowship (yes, this is turning out somewhat like an Oscar speech — <em>&ldquo;first, I&rsquo;d like to thank my family and friends&hellip;&rdquo;</em>). Seriously though, I am very much looking forward to the idea of immersing myself completely in coding and working towards becoming a software engineer. I have no idea what it&rsquo;s going to be exactly, but I do know that I&rsquo;ll be learning alongside some brilliant ladies and we&rsquo;re going to build cool stuff together — that alone is enough to get me all fired up and ready to go!</p>

<p>Lastly, I wanted to talk a little bit about the purpose of this blog and some of the things I hope to write about (a &ldquo;content strategy&rdquo; if you will, or a.k.a &ldquo;why you should care/read&rdquo;). The topics I&rsquo;m hoping to cover here will be roughly distributed as follows:</p>

<h3>Life Updates — 35%</h3>

<p>A good portion of you who are reading this blog (hi mom!) will likely be the said fantastic, supportive family and friends I&rsquo;ve dedicated this post to, so I&rsquo;d like this to be a way for me to let all of you know how I&rsquo;m doing as I trudge along (don&rsquo;t worry mom, I&rsquo;m still eating and breathing!).</p>

<h3>Thoughts on Technology — 25%</h3>

<p>Since, ultimately my goal is to become a software engineer, I&rsquo;ll have one or two thoughts about the world of technology from time-to-time. I hope to cherrypick the ones I find most compelling and share them with you. Feel free to discuss them with me and provide your critiques, I&rsquo;m here to learn as much as I can.</p>

<h3>Learning to Code — 25%</h3>

<p>I&rsquo;ll be doing a lot of that here, so I&rsquo;m definitely going to talk about it. I want to share some thoughts around coding and also learning code as an adult without a CS background. While on a broad level, the general pillars of success such as perserverence, resourcefulness, and grit still apply to learning code, I suspect there are more granular aspects unique to coding and there are likely some personal insights that can be gathered around those.</p>

<h3>Being a Millennial — 10%</h3>

<p>While there are already entire publications dedicated to this idea and this is not the primary highlight for this blog, as a member of this demographic, I will likely end up somehow sharing my quarter-life crisis, struggles with finding the &ldquo;bliss&rdquo; in my life, and other such &ldquo;coming-of-age&rdquo; highlights. I think that these are common themes that come up when reflecting, but I also understand there are already so many more credible explorations around these ideas and it may be a little tired for me to add to them. So I&rsquo;ll try to only throw my hat in the ring if I feel I have something worthwhile and of course, as always, feel free to critique.</p>

<h3>Food + Coffee — 4%</h3>

<p>Those who know me know I love to eat and drink coffee, so I will occassionally highlight some discoveries I make out here. If you have any suggestions for me, I&rsquo;m all for trying new things, so hit me! Or better yet, come along if you happen to be in the Bay Area!</p>

<h3>Future Directions — 1%</h3>

<p>I haven&rsquo;t even fully started this thing and I&rsquo;m already thinking future iterations (welcome to the world of Doria!). As I keep writing, I&rsquo;ll be keeping tabs on the way this blog evolves and speak to any significant shifts it might go through. I don&rsquo;t really foresee anything major in the near future, but it&rsquo;s definitely something I am keeping in the back of my mind. For now, I will focus on generating content and bringing in a comment system, so I can gather as much feedback as possible. Your thoughts will also help dictate my writing, so I really do appreciate any comments and feedback you might have!</p>

<p>Thank you for reading the inaugural post of my blog, cheers! &#127867;</p>
]]></content>
        </item>
        
    </channel>
</rss>
