---
layout: post
title:  "Week 2 - Object Oriented Life Planning"
date:   2016-01-17 10:00:00 -0800
comments: true
categories: life update, work, Hackbright
---
Before digging into week 2 of Hackbright, I want to first observe a short moment of silence to honor the <a href="http://www.cnn.com/2016/01/14/entertainment/obit-alan-rickman/" target="_blank">greatest head of house Slytherin has ever seen</a>.

We covered a lot of ground this week at Hackbright, including the following:
- Collections: lists, tuples, sets, dictionaries
- Markov chains
- Twitter API
- Object-oriented programming
- More command line tools, including working with virtualenv

For me, week 2 had a real focus on expanding our understanding of developing software by bringing together all of these data structures and logical tools and getting our brains ticking on good "design". Design is not visual in this case — it refers to being cognisant of how we stitch together all the moving parts of our program. The lab exercises are longer this week and allude to this by bringing together different learning points and showing us how all the teeth on the gears fit together.

As an example, this week in lab with our pairs, we built a program, a Twitter bot, that tweeted messages generated based on a body of text (corpus) provided by the user through a Markov chain. This combined two separate tools, a mathematical model and a social media API, demonstrating how they work together to form a simple program with specific features. Also, it was just fun playing with various iterations of "Green Eggs and Ham" and other corpora (would you, could you, Sam I am?) &#127859;

And of course, the star of this week is working with classes, the final frontier of object-oriented programming in Python (for now). The way we interact with them reveals a lot about the way the creators of Python intended for developers to think about object-orientation. Python classes are very fluid and I find them intuitive to set-up because they have a flexible set of rules. A valuable way of embedding these concepts for my pair and I this week was to constantly say out loud, using the proper vocabulary, each time we "instantiated a new object with the class (blank)" and set "instance/attribute variables", etc. The verbal repetition helped solidify the material.

<!--The engineer I aspire to be-->
During Career Coffee this week, we talked about telling our stories. We are encouraged to reflect on our past experiences and extract our personal narratives. Combined with the design-centric class materials this week, it really got me thinking about what my personal mantra/philosophies on software engineering. I began to put together a profile of "what type of software engineer I want to be (when I grow up)". I know that sounds like a Buzzfeed quiz, but since I don't feel I have the authority to speak definitively about what makes a good software engineer, I can only share the qualities I currently aspire to embody in my upcoming career. They are fairly general and are still budding, hopefully they are still interesting.

So far I've chosen the following three qualities to work on:
- Empathy for everyone and everything — the engineering team, the maintainer(s) of the code, the product team, the end-user, and the technology
- Never let the technology outgrow me — or at least my passion for it
- Grit and perseverance — no problem is above me but I am not above the problems

<h3>Empathy</h3>
This is something all humans should generally strive for, but in the context of our lectures this week, it is important to extend empathy to those around us when writing code. Coding is not a private, personal thing — when we write a line of code, people are going to be affected by it. Someone, someday, will read, use, and/or maintain the code we write, we don't just get to keep that in a locket around our necks. So, it is important in the design phase to be empathetic towards other software engineers — focussing on clarity in the code and always looking for ways to improve accessibility. I also want to take into account the rest of my product team and the end-user. A good piece of software (that sells) has features a user wants and a great execution to go with it. This cannot be achieved if any part of the product team is missing. Thus it is important to pay attention to what non-programmers are saying about the program and through the lens of a software engineer, improving the final user experience, starting from a solid, thoughtful software structural design.

<h3>Passion for Technology</h3>
Part of being good at something is enjoying working with it. I always want to stay updated on the technology world as a whole and hopefully never let it outgrow me. Unfortunately, as with most things I will likely at some point fall behind (probably in a far, far future), but even then, I would never want it to be beyond my comprehension or to become so out of touch that it is no longer something I enjoy.

<h3>Grit and Perseverance</h3>
I think this last piece is straightforward and very much conventional wisdom, but it goes a long way here at Hackbright. In a bootcamp setting, everything is quicker and we are all sacrificing a lot to be in the classroom together. The exercises we are facing are designed to push our limits in the compressed timelines. Issues will arise when pairing and sometimes heads will butt. That being said, these things are surmountable — they are not outside of our abilities to solve them. Grit is what keeps us pushing back on exercises that challenge us and puts our ego aside so we can have the conversations we need to have with our pairs. It also shows us that we are not above solving these issues. We should not have the expectation that others will pick up after us — we have a responsibility to work through the things we encounter. Grit gives us the energy to face all the things that are flying in at once. This is something that I would want to carry throughout my software engineering career.

As mentioned earlier, the picture I've painted is fairly rudimentary, which makes sense since it is only week 2. I just wanted to get some of my thoughts and goals on "paper" and reflect on them as we continue through our journey at Hackbright!

Lastly, I've gathered feedback from the first two posts and made some quick updates on the blog itself:
- I've put in a return home button after you get to a post — I realized that is very poor planning on my part!
- External links now open up to new pages

As usual, thank you for reading and cheers! &#129412;